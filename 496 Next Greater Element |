class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res(nums1.size(), -1);
        stack<int> st;
        unordered_map<int, int> umap;
        for(int i = 0; i < nums1.size(); i++) {
            umap[nums1[i]] = i;
        }
        st.push(0);
        for(int j = 1; j < nums2.size(); j++) {
            if(nums2[j] <= nums2[st.top()]) {
                st.push(j);
            }
            else {
                //WHILE
                while(!st.empty() && nums2[j] > nums2[st.top()]) {
                    //IF
                    if(umap.count(nums2[st.top()]) > 0) {    //same as if(umap.find(nums2[st.top()]) != umap.end()) 
                        int index = umap[nums2[st.top()]];  
                        res[index] = nums2[j];     //assign the value to res vector, this value is the bigger value after nums2[st.top()] 
                    }
                    st.pop();
                }
                st.push(j);
            }
        }
        return res;
    }
};


//IF:
//'if' only controls to 'res'. 
//if st.top() is a value in map/nums1, get in the index of the value, so we can get res[index], because the index of res is the same as of nums1.
//if the value IS NOT in nums1, push new value into the stack; if the value IS in nums1, calculate res.

//WHILE:
//while controls to 'pop'.
//if st.top() is in nums1, calculate res; if not, then of course pop it since it doesnt make sense to keep it.

//IF ELSE:
//in all the 3 scenarios, gotta st.push(i).


//optimise the code
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res(nums1.size(), -1);
        stack<int> st;
        unordered_map<int, int> umap;
        for(int i = 0; i < nums1.size(); i++) {
            umap[nums1[i]] = i;
        }
        st.push(0);
        for(int j = 1; j < nums2.size(); j++) {
            while(!st.empty() && nums2[j] > nums2[st.top()]) {
                if(umap.count(nums2[st.top()]) > 0) {
                    int index = umap[nums2[st.top()]];  
                    res[index] = nums2[j]; 
                }
                st.pop();
            }
            st.push(j);
        }
        return res;
    }
};







