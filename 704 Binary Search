//this method is based on mid is in [l, r], the condition of while loops has to be l<=r rather than l<r, say, nums = [1,2,3,4,5], target = 2, if l<r, after two loops, l == 1, r == 1...
//can't get in the third loop, which is when nums[mid] == 1 and mid will be returned.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int res = 0;
        int l = 0;
        int r = nums.size()-1;
        while(l<r) {    //when l == r, [l, r] is still valid
            int mid = (l+r)/2;
            if(nums[mid] > target) r = mid-1;
            else if(nums[mid] < target) l = mid+1;
            else return mid;
        }
        return -1;
    }
};




//this method is based on that mid is [l, r)

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size();             
        while(l < r) {                                  //it's impossible that l == r
            int mid = (l + r) / 2; 
            if(nums[mid] > target) r = mid;
            else if(nums[mid] < target) l = mid + 1;
            else return mid;
        }
        return -1;
    }
};
