class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res(2);
        unordered_map<int, int> map;
        for(int i = 0; i < nums.size(); i++) {
            int tmp = target - nums[i];
            if(map.find(tmp) != map.end()) {
                res[0] = i;
                res[1] = map[tmp];
                break;
            }
            map[nums[i]] = i;
        }
        return res;
    }
};



//method 2
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       vector<int> res;
       int sum = 0;
       int sub_start = 0;
       for(int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            res.push_back(i);
            if(sum > target) {
                res.erase(res.begin()+sub_start);
                sub_start++;
            }
            if(sum == target) {
                return res;
            }
       }
       return res;
    }
};
