class Solution {
private:
    class MyQueue {
    public:
        deque<int> dq;
        void popElement(int value) {
            if(!dq.empty() && value == dq.front()) {
                dq.pop_front();
            }
        }
        void pushElement(int value) {
            while(!dq.empty() && value > dq.front()) {
                dq.pop_front();
            }
            dq.push_back(value);
        }
        int frontElement() {
            return dq.front();
        }
    };
public:  //this public is mandatory, otherwise it gets a compile error
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        MyQueue mq;
        vector<int> res;
        //go through first k window to build mq and res
        for(int i = 0; i < k; i++) {
            mq.pushElement(nums[i]);
        }
        res.push_back(mq.frontElement());
        //start moving k window
        for(int i = k; i < nums.size(); i++) {
            mq.popElement(nums[i-k]);
            mq.pushElement(nums[i]);
            res.push_back(mq.frontElement());
        }
        return res;
    }
};
